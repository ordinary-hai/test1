<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.bjpowernode.dao.StudentDao">
    <!--根据id查单条-->
    <select id="getById" parameterType="java.lang.String" resultType="com.bjpowernode.domain.Student">
        select * from tbl_student where id = #{id}
    </select>
    <!--查询所有-->
    <select id="getAll" parameterType="java.lang.String" resultType="com.bjpowernode.domain.Student">
        select * from tbl_student;
    </select>
    <!--添加-->
    <insert id="save">
        insert into tbl_student(id,name,age) values (#{id},#{name},#{age})
    </insert>
    <!--根据id修改数据-->
    <update id="updateStudent">
        update tbl_student set name =#{name},age=#{age} where id=#{id}
    </update>
    <!--根据id删除数据-->
    <delete id="deleteStudent">
        delete from tbl_student where id=#{id}
    </delete>

    <!-- ======================动态sql====================== -->
    <select id="select17" parameterType="Student" resultType="Student">
        select id,name,age,address from tbl_student
        <!--
            where标签：
                   当where标签在使用的时候，必须要搭配where标签对中的if标签来使用
                   通过if标签的判断，如果有查询条件，则展现where关键字，如果没有查询条件则不展现where关键字
                   where标签会自动的屏蔽掉第一个连接符 and/or
        -->
        <where>
            <if test="name!=null and name!=''">
                name like '%' #{name} '%'
            </if>

            <if test="address != null and address != ''">
                or address like '%' #{address} '%'
            </if>
        </where>
    </select>

    <select id="select18" resultType="Student">
        select * from tbl_student
        where id in
        <!--
            foreach标签：用来遍历传递来的数组参数
            collection:标识传递参数的类型
                        array:数组
                        list:集合
            item:每一次遍历出来的元素，在使用该元素的时候，需要套用在#{}中
            open:拼接循环的开始符号
            close:拼接循环的结束符号
            separator:元素与元素之间的分隔符
        -->
        <foreach collection="array" item="id" open="(" close=")" separator=",">
            #{id}
        </foreach>
    </select>

    <!--
       使用sql标签制作sql片段
       sql片段的作用是用来代替sql语句中的代码
       如果你的mapper映射文件中的sql语句某些代码出现了大量的重复，我们可以使用sql片段来代替他们
       id：sql片段的唯一标识，将来找到sql片段使用id来进行定位
       将来的实际项目开发中，使用sql片段用来代替重复率高，且复杂的子查询
       select * from tbl
       where name=(
           select xxxxx
           xxxxx
               (
                   select .....
               )
       )
       注意：
           对于sql片段
           在同一个mapper下，大量的出现重复的子查询的几率不高，所以一般情况下没有使用sql片段的必要
           在实际项目开发中，如果你大量的使用sql片段，会大大的降低sql语句的可读性
           在很多企业中，干脆摒弃使用sql片段的机制
   -->
    <sql id="sql1">

        select * from tbl_student

    </sql>

    <select id="select19" parameterType="String" resultType="Student">
        <include refid="sql1"/> where id=#{id}
    </select>

    <select id="select20" resultType="map">
        select
        s.name as sname,
        c.name as cname
        from tbl_student s
        join tbl_classroom c
        on s.classroomId=c.id
    </select>
</mapper>